[
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T14:48:19",
        "author_id": "16040982",
        "data_id": "1844027115211293007",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 3510,
        "audience_total": 24501,
        "total_reposts": 4,
        "post_count": 1,
        "author": "s\u00e9bastien dudek \ud83d\udce1",
        "username": "fluxius",
        "v_score": 0.544348,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": "https://pbs.twimg.com/profile_images/1582984560995975169/NEBs1mvr_normal.jpg",
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T16:19:07",
        "author_id": "1698271244041302016",
        "data_id": "1844049967889220011",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 6,
        "audience_total": 24501,
        "total_reposts": 4,
        "post_count": 1,
        "author": "agnieszka",
        "username": "agnieszkaw85833",
        "v_score": 0.544348,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T14:54:21",
        "author_id": "914895373",
        "data_id": "1844028633104744910",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 18631,
        "audience_total": 24501,
        "total_reposts": 4,
        "post_count": 1,
        "author": "kmkz",
        "username": "kmkz_security",
        "v_score": 0.544348,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T14:55:52",
        "author_id": "3242378934",
        "data_id": "1844029015428149457",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 2246,
        "audience_total": 24501,
        "total_reposts": 4,
        "post_count": 1,
        "author": "ethical hacker",
        "username": "offethhacker",
        "v_score": 0.544348,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T14:48:52",
        "author_id": "1749995211617390592",
        "data_id": "1844027253518451168",
        "reposts": 0,
        "post": "@binitamshah great find, i've been following cve-2023-52447 and the implications for container security are significant. looking forward to diving deeper into this poc.",
        "audience": 108,
        "audience_total": 24501,
        "total_reposts": 4,
        "post_count": 1,
        "author": "charlesai cyber",
        "username": "chcybersec",
        "v_score": 0.544348,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    }
]