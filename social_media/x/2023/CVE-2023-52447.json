[
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T14:48:19",
        "author_id": "16040982",
        "data_id": "1844027115211293007",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 3510,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "s\u00e9bastien dudek \ud83d\udce1",
        "username": "fluxius",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": "https://pbs.twimg.com/profile_images/1582984560995975169/NEBs1mvr_normal.jpg",
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T16:19:07",
        "author_id": "1698271244041302016",
        "data_id": "1844049967889220011",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 6,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "agnieszka",
        "username": "agnieszkaw85833",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T14:54:21",
        "author_id": "914895373",
        "data_id": "1844028633104744910",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 18631,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "kmkz",
        "username": "kmkz_security",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T14:55:52",
        "author_id": "3242378934",
        "data_id": "1844029015428149457",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 2246,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "ethical hacker",
        "username": "offethhacker",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T14:48:52",
        "author_id": "1749995211617390592",
        "data_id": "1844027253518451168",
        "reposts": 0,
        "post": "@binitamshah great find, i've been following cve-2023-52447 and the implications for container security are significant. looking forward to diving deeper into this poc.",
        "audience": 108,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "charlesai cyber",
        "username": "chcybersec",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T21:03:09",
        "author_id": "931359997",
        "data_id": "1844121445137535004",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 3135,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "jon greig",
        "username": "jgreigj",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": "https://pbs.twimg.com/profile_images/1618989845027618818/Zh8DDslX_normal.jpg",
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T21:11:27",
        "author_id": "1339817359",
        "data_id": "1844123536354574536",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 53,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "javiza",
        "username": "javiza_jae3",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T22:38:09",
        "author_id": "1838872457547329536",
        "data_id": "1844145352469061940",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 2,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "muhammad muqaddam siddiqui",
        "username": "_mmsiddiqui_",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-09T21:11:22",
        "author_id": "731753429782036480",
        "data_id": "1844123511998287943",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 145055,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "anonymous\ud83d\udc3e\ud83d\udc08\u200d\u2b1b",
        "username": "youranonriots",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-10T02:49:23",
        "author_id": "228728885",
        "data_id": "1844208579072623027",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 138,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "sir angel \u2651 \ud83d\udcf1 \u2601\ufe0f \ud83d\udcbb\ud83d\udc99#msc #cybersecurity",
        "username": "ing_acepeda",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-10T11:32:07",
        "author_id": "1078009370",
        "data_id": "1844340127675580963",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 6918,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "bassam assiri\ud83c\uddf8\ud83c\udde6",
        "username": "bassamassiri",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-10T18:38:01",
        "author_id": "1452307746913587200",
        "data_id": "1844447308882247764",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 40,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "\uc9c4\uac74\uc2b9",
        "username": "comalmot_gs25",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-11T01:44:17",
        "author_id": "1803651882587504640",
        "data_id": "1844554583084786097",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 42,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "m1ndr1v3r\ud83c\udff4\u200d\u2620\ufe0f",
        "username": "mindriver72",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-11T05:33:57",
        "author_id": "1210610282730414080",
        "data_id": "1844612381403406426",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 122,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "parity",
        "username": "aparitybit",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-11T04:11:06",
        "author_id": "1453291943828537346",
        "data_id": "1844591529018438044",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 57,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "nhnkyunaccha",
        "username": "roberto12885163",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    },
    {
        "cve": "CVE-2023-52447",
        "created_datetime": "2024-10-11T22:20:45",
        "author_id": "3998313800",
        "data_id": "1844865752353935368",
        "reposts": 1,
        "post": "rt @binitamshah: poc  for cve-2023-52447 released -  a linux kernel flaw enabling container escape : https://t.co/uhqpwtinfw",
        "audience": 477,
        "audience_total": 180540,
        "total_reposts": 15,
        "post_count": 1,
        "author": "bryan rhodes",
        "username": "rhodes0x42",
        "v_score": 0.643536,
        "e_score": 0.00042,
        "base_score": "6.7",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nBPF: DEFER THE FREE OF INNER MAP WHEN NECESSARY\n\nWHEN UPDATING OR DELETING AN INNER MAP IN MAP ARRAY OR MAP HTAB, THE MAP\nMAY STILL BE ACCESSED BY NON-SLEEPABLE PROGRAM OR SLEEPABLE PROGRAM.\nHOWEVER BPF_MAP_FD_PUT_PTR() DECREASES THE REF-COUNTER OF THE INNER MAP\nDIRECTLY THROUGH BPF_MAP_PUT(), IF THE REF-COUNTER IS THE LAST ONE\n(WHICH IS TRUE FOR MOST CASES), THE INNER MAP WILL BE FREED BY\nOPS->MAP_FREE() IN A KWORKER. BUT FOR NOW, MOST .MAP_FREE() CALLBACKS\nDONT USE SYNCHRONIZE_RCU() OR ITS VARIANTS TO WAIT FOR THE ELAPSE OF A\nRCU GRACE PERIOD, SO AFTER THE INVOCATION OF OPS->MAP_FREE COMPLETES,\nTHE BPF PROGRAM WHICH IS ACCESSING THE INNER MAP MAY INCUR\nUSE-AFTER-FREE PROBLEM.\n\nFIX THE FREE OF INNER MAP BY INVOKING BPF_MAP_FREE_DEFERRED() AFTER BOTH\nONE RCU GRACE PERIOD AND ONE TASKS TRACE RCU GRACE PERIOD IF THE INNER\nMAP HAS BEEN REMOVED FROM THE OUTER MAP BEFORE. THE DEFERMENT IS\nACCOMPLISHED BY USING CALL_RCU() OR CALL_RCU_TASKS_TRACE() WHEN\nRELEASING THE LAST REF-COUNTER OF BPF MAP. THE NEWLY-ADDED RCU_HEAD\nFIELD IN BPF_MAP SHARES THE SAME STORAGE SPACE WITH WORK FIELD TO\nREDUCE THE SIZE OF BPF_MAP.",
        "last_modified_datetime": "2024-10-07 17:46:00",
        "published_datetime": "2024-02-22 17:15:00",
        "vendor_logo": [
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    }
]