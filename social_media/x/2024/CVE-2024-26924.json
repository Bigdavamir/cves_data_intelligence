[
    {
        "cve": "CVE-2024-26924",
        "created_datetime": "2025-08-19T20:25:37",
        "author_id": "1133945839737434112",
        "data_id": "1957901789770195248",
        "reposts": 1,
        "post": "rt @cezar_h_linux: \ud83d\udea8 urgent update for sysadmins &amp; devops! \ud83d\udea8\n\na critical vulnerability (cve-2024-26924) has been found in the linux kernel,\u2026",
        "audience": 4599,
        "audience_total": 4599,
        "total_reposts": 1,
        "post_count": 0,
        "author": "age veri fication hater \ud83c\udff3\ufe0f\u200d\u26a7\ufe0f\ud83c\udf49\ud83c\udf3b",
        "username": "chloetankahhui",
        "v_score": 0.289899,
        "e_score": 0.01312,
        "base_score": "5.9",
        "description": "IN THE LINUX KERNEL, THE FOLLOWING VULNERABILITY HAS BEEN RESOLVED:\n\nNETFILTER: NFT_SET_PIPAPO: DO NOT FREE LIVE ELEMENT\n\nPABLO REPORTS A CRASH WITH LARGE BATCHES OF ELEMENTS WITH A\nBACK-TO-BACK ADD/REMOVE PATTERN.  QUOTING PABLO:\n\n  ADD_ELEM(00000000) TIMEOUT 100 MS\n  ...\n  ADD_ELEM(0000000X) TIMEOUT 100 MS\n  DEL_ELEM(0000000X) <---------------- DELETE ONE THAT WAS JUST ADDED\n  ...\n  ADD_ELEM(00005000) TIMEOUT 100 MS\n\n  1) NFT_PIPAPO_REMOVE() REMOVES ELEMENT 0000000X\n  THEN, KASAN SHOWS A SPLAT.\n\nLOOKING AT THE REMOVE FUNCTION THERE IS A CHANCE THAT WE WILL DROP A\nRULE THAT MAPS TO A NON-DEACTIVATED ELEMENT.\n\nREMOVAL HAPPENS IN TWO STEPS, FIRST WE DO A LOOKUP FOR KEY K AND RETURN THE\nTO-BE-REMOVED ELEMENT AND MARK IT AS INACTIVE IN THE NEXT GENERATION.\nTHEN, IN A SECOND STEP, THE ELEMENT GETS REMOVED FROM THE SET/MAP.\n\nTHE _REMOVE FUNCTION DOES NOT WORK CORRECTLY IF WE HAVE MORE THAN ONE\nELEMENT THAT SHARE THE SAME KEY.\n\nTHIS CAN HAPPEN IF WE INSERT AN ELEMENT INTO A SET WHEN THE SET ALREADY\nHOLDS AN ELEMENT WITH SAME KEY, BUT THE ELEMENT MAPPING TO THE EXISTING\nKEY HAS TIMED OUT OR IS NOT ACTIVE IN THE NEXT GENERATION.\n\nIN SUCH CASE ITS POSSIBLE THAT REMOVAL WILL UNMAP THE WRONG ELEMENT.\nIF THIS HAPPENS, WE WILL LEAK THE NON-DEACTIVATED ELEMENT, IT BECOMES\nUNREACHABLE.\n\nTHE ELEMENT THAT GOT DEACTIVATED (AND WILL BE FREED LATER) WILL\nREMAIN REACHABLE IN THE SET DATA STRUCTURE, THIS CAN RESULT IN\nA CRASH WHEN SUCH AN ELEMENT IS RETRIEVED DURING LOOKUP (STALE\nPOINTER).\n\nADD A CHECK THAT THE FULLY MATCHING KEY DOES IN FACT MAP TO THE ELEMENT\nTHAT WE HAVE MARKED AS INACTIVE IN THE DEACTIVATION STEP.\nIF NOT, WE NEED TO CONTINUE SEARCHING.\n\nADD A BUG/WARN TRAP AT THE END OF THE FUNCTION AS WELL, THE REMOVE\nFUNCTION MUST NOT EVER BE CALLED WITH AN INVISIBLE/UNREACHABLE/NON-EXISTENT\nELEMENT.\n\nV2: AVOID UNEEDED TEMPORARY VARIABLE (STEFANO)",
        "last_modified_datetime": "2025-03-21 14:46:00",
        "published_datetime": "2024-04-25 06:15:00",
        "vendor_logo": [
            [
                "debian",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/debian/debian.png"
            ],
            [
                "linux",
                "https://kazepublic.blob.core.windows.net/vendor-logos/data/Linux/linux.png"
            ]
        ],
        "profile_url": null,
        "feed_name": "twitter"
    }
]